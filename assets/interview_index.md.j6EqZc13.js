import{_ as a,c as i,o as s,a4 as l}from"./chunks/framework.CzJgWsJ8.js";const _=JSON.parse('{"title":"面试题","description":"","frontmatter":{},"headers":[],"relativePath":"interview/index.md","filePath":"interview/index.md"}'),e={name:"interview/index.md"},n=l(`<h1 id="面试题" tabindex="-1">面试题 <a class="header-anchor" href="#面试题" aria-label="Permalink to &quot;面试题&quot;">​</a></h1><h2 id="_1-常见-httpcode-及其含义" tabindex="-1">1.常见 httpCode 及其含义 <a class="header-anchor" href="#_1-常见-httpcode-及其含义" aria-label="Permalink to &quot;1.常见 httpCode 及其含义&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 成功</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 资源有多个位置</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">301</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 资源永久移动到其他位置</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">302</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 资源暂时移动到其他位置</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">400</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bad request</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">401</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 未授权</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">403</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Forbidden</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">404</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Not found</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">408</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 请求超时</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 服务器错误</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">502</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 网关错误</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">504</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 网关超时</span></span></code></pre></div><h2 id="_2-事件循环" tabindex="-1">2.事件循环 <a class="header-anchor" href="#_2-事件循环" aria-label="Permalink to &quot;2.事件循环&quot;">​</a></h2><ol><li>进程：每个程序运行时的专属空间，相互独立，可以互相通信，但需要双方都同意。</li><li>线程：进程包含线程，至少有一个主线程，可能有多个其他线程，主线程终止，程序退出。</li><li>浏览器的进程和线程：浏览器的是一个多进程，多线程模型； 浏览器启动的时候，会启动浏览器进程，然后启动网络进程，渲染进程等，浏览器进程主要就是浏览器界面的那些东西，用户交互，打开一个标签页就是启动一个渲染进程。标签页打开多了，就比较吃内存。</li><li>渲染主进程：包含渲染主线程-》解析 html，css，计算样式，布局，处理图层，执行 js，执行回调函数，计时器，每秒画页面 60 次等</li><li>事件循环（消息循环）：渲染主线程在执行任务，如果有新的任务，则会放入消息队列，等主线程执行万当前任务，然后再去消息队列取任务执行，就这样一直循环，很多其他线程都可以网消息队列添加任务。</li></ol><h3 id="_1-何为异步" tabindex="-1">1. 何为异步？ <a class="header-anchor" href="#_1-何为异步" aria-label="Permalink to &quot;1. 何为异步？&quot;">​</a></h3><p>js 是一门单线程语言，运行在浏览器的渲染主线程之中，渲染主线程只有一个，渲染主线程承担很多工作，包括渲染页面，执行 js 等，如果使用同步，则会导致主线程阻塞，从而导致消息队列中的任务无法得到执行，这样就会导致主线程白白消耗时间，另一方面页面无法及时更新，导致页面卡死。所以浏览器采用异步的方式来解决，比如定时器，网络，事件监听等任务，主线程将其交给其他线程去做，自己继续执行任务，等其他线程处理完毕之后，将代码包装为任务，放入消息队列末尾，等在主线程调用，这种模式可以保证浏览器用不阻塞，最大限度保证单线程的流畅运行。</p><h3 id="_2-任务有优先级吗" tabindex="-1">2. 任务有优先级吗 <a class="header-anchor" href="#_2-任务有优先级吗" aria-label="Permalink to &quot;2. 任务有优先级吗&quot;">​</a></h3><ol><li>任务没有优先级，但是队列有优先级。</li><li>延时队列：优先级中</li><li>交互队列：优先级高</li><li>微队列：优先级最高（Promise，MutationObserver）</li></ol><h2 id="_3-浏览器渲染原理" tabindex="-1">3. 浏览器渲染原理 <a class="header-anchor" href="#_3-浏览器渲染原理" aria-label="Permalink to &quot;3. 浏览器渲染原理&quot;">​</a></h2><p>解析 html -》 计算样式 -》 布局 -》 分层 -》 绘制 -》分块 -》光栅化 -》 画</p><ol><li><p>parse HTML：dom 树，css om 树，树的每个叶子就是一个 js 对象。网络线程下载 link 的 css，预解析线程处理 link 标签的 css 样式表。渲染线程遇到 js 代码的时候，会停下来去执行 js 代码（因为 js 会操作 dom）。</p></li><li><p>样式计算：遍历 dom 树，计算最终样式，computed style。</p></li><li><p>布局： layout 树 (::before 存在 layout 树，不存在 dom 树)，内容还会包含在行盒中，clientWidth 也是来自 layout 树，getComputedStyle 也是来子 layout 树。</p></li><li><p>分层：需要重新绘制的时候，只绘制其中一层。will-change 影响分层，opacity 会影响分层，</p></li><li><p>绘制：为每一个层生成绘制指令集。</p></li><li><p>分块：合成线程，启动其他线程，将每一层分为小的区域，优先画视口区域。</p></li><li><p>光栅化：将每个块变成位图，优先处理视口区域，GPU 来做，</p></li><li><p>画：合成线程将其交给 GPU 线程，GPU 提交给应将（这里才会考虑变形，缩放，所以 transform 效率高）</p></li></ol><h3 id="_1-回流-reflow-与重绘-repaint" tabindex="-1">1. 回流（reflow）与重绘（repaint） <a class="header-anchor" href="#_1-回流-reflow-与重绘-repaint" aria-label="Permalink to &quot;1. 回流（reflow）与重绘（repaint）&quot;">​</a></h3><p>修改几何信息，改动 dom 元素的结构，影响布局，重新计算，回流+重绘， 修改非几何信息，重绘，</p><h2 id="_4-bfc" tabindex="-1">4. bfc <a class="header-anchor" href="#_4-bfc" aria-label="Permalink to &quot;4. bfc&quot;">​</a></h2><p>块级格式化上下文。 形成独立渲染区域，内部元素的渲染不会影响外界。</p><p>浮动 绝对定位，固定定位 块级元素 flex inline-block</p><p>应用场景：清除浮动</p><h2 id="_5-css-样式计算过程" tabindex="-1">5. css 样式计算过程 <a class="header-anchor" href="#_5-css-样式计算过程" aria-label="Permalink to &quot;5. css 样式计算过程&quot;">​</a></h2><h2 id="_6" tabindex="-1">6. <a class="header-anchor" href="#_6" aria-label="Permalink to &quot;6.&quot;">​</a></h2>`,20),t=[n];function h(p,r,o,d,k,c){return s(),i("div",null,t)}const u=a(e,[["render",h]]);export{_ as __pageData,u as default};
