import{_ as s,c as i,o as a,a4 as e}from"./chunks/framework.CzJgWsJ8.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"react/react-interview.md","filePath":"react/react-interview.md"}'),t={name:"react/react-interview.md"},n=e(`<h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h1><h2 id="一、react-组件数据交互方式" tabindex="-1">一、react 组件数据交互方式 <a class="header-anchor" href="#一、react-组件数据交互方式" aria-label="Permalink to &quot;一、react 组件数据交互方式&quot;">​</a></h2><ol><li>父传子通过 props。</li><li>子传父通过给子组件传递方法，在子组件中调用方法。</li><li>跨级的组件的传参可以使用 context。</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用 createContext 创建一个上下文</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 通过 该对象的 provider 组件 将值注入</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 在需要的地方引入该对象，并且使用 useContext hook 使用对象</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 如果不使用 hook 可以使用，上下文中的 consumer 消费，具体写法是在消费组件里面写一个函数，函数会节后一个value的值，这个值就是 provier 注入的值，然后在里面return jsx即可</span></span></code></pre></div><ol start="4"><li>使用 eventBus。</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 安装  events 插件</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 引入并且 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EventEmitter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 在需要的地方使用即可</span></span></code></pre></div><ol start="5"><li>使用状态管理工具 mobx zustand redux 等。</li><li>兄弟组件，状态提升，共同的父组件管理状态。</li></ol>`,7),l=[n];function h(p,r,o,k,c,d){return a(),i("div",null,l)}const _=s(t,[["render",h]]);export{g as __pageData,_ as default};
